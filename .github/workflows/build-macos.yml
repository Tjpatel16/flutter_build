name: Build and Release macOS Flutter App

on:
  push:
    tags:
      - 'v*.*.*' # Trigger the workflow only when a tag like v1.0.1 is pushed

env:
  FLUTTER_VERSION: "3.24.5"

jobs:
  build-macos:
    name: Build macOS App
    runs-on: macos-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # Step 3: Install Flutter dependencies
      - name: Install Flutter Dependencies
        run: flutter pub get

      # Step 4: Enable macOS support
      - name: Enable macOS Support
        run: flutter config --enable-macos-desktop

      # Step 5: Build the macOS app
      - name: Build macOS App
        run: flutter build macos --release

      # Step 6: Debug the build directory
      - name: Debug Build Directory
        run: |
          echo "Contents of build/macos/Build/Products/Release:"
          ls -la build/macos/Build/Products/Release

      # Step 7: Prepare DMG Configuration and Locate .app File
      - name: Prepare DMG Configuration
        id: prepare-dmg
        run: |
          # Find the .app file in the build directory
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app" -type d | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: .app file not found in build/macos/Build/Products/Release"
            exit 1
          fi

          echo "Found .app file at $APP_PATH"
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

          # Create the DMG configuration JSON file
          mkdir -p dmg-config
          cat <<EOF > dmg-config/dmg-config.json
          {
            "title": "Flutter App",
            "icon": "assets/images/logo.png",
            "contents": [
              {
                "x": 448,
                "y": 344,
                "type": "link",
                "path": "/Applications"
              },
              {
                "x": 192,
                "y": 344,
                "type": "file",
                "path": "$APP_PATH"
              }
            ],
            "icon-size": 128,
            "window": {
              "size": {
                "width": 640,
                "height": 480
              }
            }
          }
          EOF

      # Step 8: Install the create-dmg tool
      - name: Install create-dmg
        run: npm install --global create-dmg

      # Step 9: Package the DMG file
      - name: Package DMG File
        run: |
          # Ensure the .app file is found and passed correctly
          echo "APP_PATH is $APP_PATH"
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: The .app file at $APP_PATH does not exist"
            exit 1
          fi
          
          # Debug the path and create the DMG file
          echo "Running create-dmg with APP_PATH: $APP_PATH"
          create-dmg --config dmg-config/dmg-config.json --overwrite .
          
          # Ensure the output is renamed properly (in case of spaces)
          mv "Flutter App*.dmg" "flutter-build-macos-${GITHUB_REF_NAME}.dmg"

      # Step 10: Upload the DMG file as an artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-dmg
          path: "flutter-build-macos-${GITHUB_REF_NAME}.dmg"

      # Step 11: Create a GitHub release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "flutter-build-macos-${GITHUB_REF_NAME}.dmg"
          token: ${{ secrets.TOKEN }}
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            This release includes the macOS build of the Flutter app.
            - Tag: ${{ github.ref_name }}
          draft: false
          prerelease: false