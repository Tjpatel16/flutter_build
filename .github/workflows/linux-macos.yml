name: Build and Release Linux Flutter App

on:
  push:
    tags:
      - 'v*.*.*' # Trigger the workflow only when a tag like v1.0.3 is pushed

env:
  FLUTTER_VERSION: "3.24.5"

jobs:
  build-linux:
    name: Build Linux App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Flutter Dependencies
        run: flutter pub get

      - name: Enable Linux Support
        run: flutter config --enable-linux-desktop

      - name: Install Dependencies for Packaging
        run: |
          sudo apt update
          sudo apt install -y \
            cmake \
            ninja-build \
            libgtk-3-dev \
            liblzma-dev \
            libpango1.0-0 \
            libatk1.0-0 \
            libgdk-pixbuf2.0-0 \
            libgdk-pixbuf2.0-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxss-dev \
            libappindicator3-dev \
            libgtksourceview-3.0-dev \
            libnss3 \
            libx11-xcb-dev \
            libdbus-1-dev \
            libgstreamer1.0-0 \
            libgstreamer-plugins-base1.0-0 \
            libxcomposite-dev \
            libxdamage-dev \
            libasound2-dev \
            libgnomecanvas-2.0-0 \
            build-essential

      - name: Build Linux App Without Code Signing
        run: flutter build linux --release

      - name: Debug Build Directory
        run: |
          echo "Contents of build/linux/x64/release/bundle:"
          ls -la build/linux/x64/release/bundle

      - name: Prepare .deb Package
        id: prepare-deb
        run: |
          APP_NAME="flutter_app" # Replace with your app's name
          VERSION="${{ github.ref_name }}"
          
          # Remove the 'v' prefix from the version if it exists
          VERSION_NUMBER="${VERSION#v}"

          BUILD_DIR="build/linux/x64/release/bundle"

          if [ ! -d "$BUILD_DIR" ]; then
            echo "Error: Build directory not found: $BUILD_DIR"
            exit 1
          fi

          echo "Building .deb package for $APP_NAME version $VERSION_NUMBER"

          # Create .deb package directory structure
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/usr/share/$APP_NAME
          mkdir -p deb-package/usr/share/icons/hicolor/128x128/apps
          mkdir -p deb-package/usr/share/applications

          # Copy the app's binary and assets to the package structure
          cp -r "$BUILD_DIR"/* deb-package/usr/share/$APP_NAME/

          # Copy the app icon
          cp assets/images/logo.png deb-package/usr/share/icons/hicolor/128x128/apps/$APP_NAME.png

          # Create the app's desktop entry
          cat <<EOF > deb-package/usr/share/applications/$APP_NAME.desktop
          [Desktop Entry]
          Name=Flutter App
          Exec=/usr/share/$APP_NAME/$APP_NAME
          Icon=$APP_NAME
          Type=Application
          Categories=Utility;
          EOF

          # Create DEBIAN control file
          cat <<EOF > deb-package/DEBIAN/control
          Package: $APP_NAME
          Version: $VERSION_NUMBER
          Architecture: amd64
          Maintainer: Your Name <youremail@example.com>
          Installed-Size: 1000
          Depends: libgtk-3-0, libgdk-pixbuf2.0-0, libpango1.0-0, libatk1.0-0
          Section: utils
          Priority: optional
          Description: A Flutter-based app
          EOF

          # Build the .deb package
          dpkg-deb --build deb-package

          # Rename the .deb package
          mv deb-package.deb "flutter-build-linux-${VERSION_NUMBER}.deb"

      - name: Prepare AppImage Configuration
        id: prepare-appimage
        run: |
          APP_NAME="flutter_app" # Replace with your app's name
          VERSION="${{ github.ref_name }}"
          VERSION_NUMBER="${VERSION#v}"

          BUILD_DIR="build/linux/x64/release/bundle"
          
          if [ ! -d "$BUILD_DIR" ]; then
            echo "Error: Build directory not found: $BUILD_DIR"
            exit 1
          fi

          echo "Building AppImage for $APP_NAME version $VERSION_NUMBER"

          # Install dependencies for AppImage
          sudo apt update
          sudo apt install -y \
            appimagetool \
            wine \
            fuse

          # Create AppImage structure
          mkdir -p appimage/$APP_NAME.AppDir/usr/bin
          mkdir -p appimage/$APP_NAME.AppDir/usr/share/icons/hicolor/128x128/apps
          mkdir -p appimage/$APP_NAME.AppDir/usr/share/applications

          # Copy the app binary and assets to the AppImage directory
          cp -r "$BUILD_DIR"/* appimage/$APP_NAME.AppDir/usr/bin/
          cp assets/images/logo.png appimage/$APP_NAME.AppDir/usr/share/icons/hicolor/128x128/apps/$APP_NAME.png

          # Create desktop entry for the AppImage
          cat <<EOF > appimage/$APP_NAME.AppDir/usr/share/applications/$APP_NAME.desktop
          [Desktop Entry]
          Name=Flutter App
          Exec=/$APP_NAME.AppDir/usr/bin/$APP_NAME
          Icon=$APP_NAME
          Type=Application
          Categories=Utility;
          EOF

          # Make the AppImage executable
          chmod +x appimage/$APP_NAME.AppDir/usr/bin/$APP_NAME

          # Build the AppImage using appimagetool
          appimagetool appimage/$APP_NAME.AppDir

          # Rename the AppImage file
          mv "$APP_NAME.AppImage" "flutter-build-linux-${VERSION_NUMBER}.AppImage"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-builds
          path: |
            flutter-build-linux-${VERSION_NUMBER}.deb
            flutter-build-linux-${VERSION_NUMBER}.AppImage

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            flutter-build-linux-${VERSION_NUMBER}.deb
            flutter-build-linux-${VERSION_NUMBER}.AppImage
          token: ${{ secrets.TOKEN }}
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            This release includes the Linux build of the Flutter app.
            - Tag: ${{ github.ref_name }}
          draft: false
          prerelease: false