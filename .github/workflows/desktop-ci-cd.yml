name: Build and Release Desktop Apps

on:
  push:
    tags:
      - 'v*' # Trigger workflow only on version tags

jobs:
  build-and-release:
    name: Build and Release Desktop Apps
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable

      - name: Extract Version from pubspec.yaml
        id: get-version
        run: |
          VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //g' | cut -d"+" -f1)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Install Dependencies
        run: flutter pub get

      # macOS Build and DMG Packaging
      - name: Build macOS App
        if: matrix.os == 'macos-latest'
        run: flutter build macos

      - name: Package macOS as DMG
        if: matrix.os == 'macos-latest'
        run: |
          brew install create-dmg
          mkdir -p dist
          create-dmg \
            --volname "FlutterBuild" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "FlutterBuild.app" 200 190 \
            --hide-extension "FlutterBuild.app" \
            --app-drop-link 600 185 \
            "build/macos/Build/Products/Release/FlutterBuild.app" \
            "dist/flutter-build-macos-$GITHUB_ENV_VERSION.dmg"

      # Windows Build and EXE Packaging
      - name: Build Windows App
        if: matrix.os == 'windows-latest'
        run: flutter build windows

      - name: Package Windows as EXE
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist
          cp build/windows/runner/Release/FlutterBuild.exe dist/flutter-build-windows-$GITHUB_ENV_VERSION.exe

      # Linux Build and DEB Packaging
      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        run: flutter build linux

      - name: Install DPKG for Linux Packaging
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y dpkg

      - name: Package Linux as DEB
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist/DEBIAN
          echo "Package: flutterbuild" > dist/DEBIAN/control
          echo "Version: $GITHUB_ENV_VERSION" >> dist/DEBIAN/control
          echo "Section: base" >> dist/DEBIAN/control
          echo "Priority: optional" >> dist/DEBIAN/control
          echo "Architecture: amd64" >> dist/DEBIAN/control
          echo "Maintainer: Your Name <your.email@example.com>" >> dist/DEBIAN/control
          echo "Description: Flutter desktop app" >> dist/DEBIAN/control
          mkdir -p dist/usr/local/bin
          cp build/linux/Release/bundle/flutterbuild dist/usr/local/bin/
          dpkg-deb --build dist "dist/flutter-build-linux-$GITHUB_ENV_VERSION.deb"

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: desktop-apps
          path: dist/

      # Create GitHub Release
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload Assets to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/
          asset_name: ${{ matrix.os }}-flutter-build-${{ env.version }}
          asset_content_type: application/octet-stream